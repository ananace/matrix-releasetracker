#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'logging'
require 'optparse'
require 'matrix_releasetracker'
require 'net/http'
require 'time'

ROOM_STATE_FILTER = {
  presence: { senders: [], types: [] },
  account_data: { senders: [], types: [] },
  room: {
    ephemeral: { senders: [], types: [] },
    state: {
      lazy_load_members: true
    },
    account_data: { senders: [], types: [] }
  }
}.freeze

class Releasetracker
  include PP::ObjectMixin

  attr_accessor :running
  attr_reader :logger, :config, :options, :client, :api

  def initialize(**options)
    @options = options
    @config = MatrixReleasetracker::Config.load! options[:config]
    @logger ||= Logging.logger[self].tap do |log|
      log.add_appenders Logging.appenders.stdout(
        layout: Logging::Layouts.pattern(pattern: "[%d|%.1l] %c: %m\n", date_pattern: '%F %T')
      )
    end
    @logger.level = options[:debug] ? :debug : :info

    logger.info 'Loaded configuration.'

    @client = config.client.client
    @api = config.client.api
  end

  def run!
    ensure_rooms

    logger.info "Starting tracker with #{config.backends.count} backends."
    @running = true

    sync_thread = Thread.new { matrix_thread }

    while running
      update_backends
      cleanup_data

      limits = config.backends.values.map(&:rate_limits).flatten.compact
      limits.each do |l|
        logger.info "Limit|#{l}"
      end
      limits = limits.select(&:near_limit)
      if limits.any?
        latest = limits.max(&:resets_in)
        logger.info "Backend limits almost reached for #{latest.backend.name}, sleeping for at least #{latest.resets_in / 60.0} minutes"
        sleep [latest.resets_in, 15 * 60].max
      else
        sleep 15 * 60
      end
    end

    sync_thread.join if sync_thread&.alive?
  end

  def pretty_print_instance_variables
    instance_variables.sort.reject { |n| %i[@logger @client @api].include? n }
  end

  def pretty_print(pp)
    pp.pp_object(self)
  end

  alias inspect pretty_print_inspect

  private

  def calculate_to_track(tracking)
    tracked = tracking.map do |obj|
      b = obj.backend
      { releases: b.last_releases(obj)[:releases], repos: b.get_all_repositories_for(obj) }
    end

    {
      releases: tracked.map { |obj| obj[:releases] }.flatten,
      repos: tracked.map { |obj| obj[:repos] }.flatten
    }
  end

  def update_backends
    to_update = config.backends
                      .map { |_, b| b.tracking }
                      .flatten
                      .shuffle
                      .group_by(&:room_id)

    to_update.each do |room_id, tracking|
      room_data = config.client.room_data[room_id.to_s]
      combined = calculate_to_track(tracking)

      if to_update[room_id].count == 1
        logger.info "#{room_id}: Tracking #{combined[:repos].count} repositories - #{combined[:releases].count} with releases, for #{tracking.first}."
      else
        grouped = to_update[room_id].group_by(&:type).map { |k, v| "#{v.count} #{k}(s)" }.join(', ')
        logger.info "#{room_id}: Tracking #{combined[:repos].count} repositories - #{combined[:releases].count} with releases, for #{grouped}."
      end

      combined[:releases].each do |rel|
        obj = rel.for_tracked

        # This shouldn't happen, but probably best to keep an eye out
        next logger.debug "#{obj}: Latest release is for untracked repo #{rel.full_name}, skipping." \
          if config.database[:tracked_repositories].where(tracking_id: obj.id, repositories_id: rel.repositories_id).empty?

        # Skip notifying if current latest release is still the same as the last notified
        next if config.database[:latest_releases].where(tracking_id: obj.id, repositories_id: rel.repositories_id, releases_id: rel.release_id).any?

        if Time.now - rel.publish_date > 7 * 24 * 60 * 60
          logger.info "#{obj}: #{rel.full_name} #{rel.version_name} release was more than 7 days ago (#{rel.publish_date}), skipping notice."
        else
          logger.info "#{obj}: Posting notice about #{rel.full_name} #{rel.version_name}"

          if obj.extradata
            rel.max_lines = obj.extradata[:max_lines] if obj.extradata.key? :max_lines
            rel.max_chars = obj.extradata[:max_chars] if obj.extradata.key? :max_chars
          end

          msgtype = room_data[:type] if room_data
          msgtype ||= 'm.notice'

          rel.avatar_url = fix_media_url(rel.avatar_url) if rel.avatar_url
          config.client.post_release(obj, rel, msgtype: msgtype)
        end

        val = {
          tracking_id: obj.id,
          repositories_id: rel.repositories_id,
          releases_id: rel.release_id
        }
        config.database[:latest_releases]
              .insert_conflict(target: %i[tracking_id repositories_id], update: val)
              .insert(val)
      rescue StandardError => e
        logger.error "Failed to post notice, #{e.class}: #{e}\n#{e.backtrace[0..10].join("\n")}"
      end
    rescue StandardError => e
      logger.error "Failed to run updates for room #{room_id}, #{e.class}: #{e}\n#{e.backtrace[0..10].join("\n")}"
    end
  end

  def cleanup_data
    next_cleanup = config.database[:meta].where(key: 'next_cleanup').first
    return unless next_cleanup.nil? || Time.now > Time.parse(next_cleanup[:value])

    logger.info 'Cleaning up old data...'

    old = Time.now - (14 * 24 * 60 * 60) # two weeks
    config.database[:releases].where { publish_date < old }.delete

    config.database[:repositories].exclude(id: config.database[:tracked_repositories].select(:repositories_id)).delete

    next_cleanup = Time.now + with_stagger(24 * 60 * 60, 0.25)
    val = {
      key: 'next_cleanup',
      value: next_cleanup.to_s
    }
    config.database[:meta].insert_conflict(target: :key, update: val).insert(val)
  end

  def with_stagger(value, stagger = 0.5)
    value + ((Random.rand - 0.5) * value * stagger)
  end

  def ensure_rooms
    logger.info 'Ensuring configured rooms are joined.'
    config.backends.map { |_k, b| b.tracking }.flatten.each do |track|
      room = track.room_id

      in_room = false
      begin
        api.join_room(room.to_s)
        in_room = true
      rescue MatrixSdk::MatrixNotFoundError => e
        # Not in room
        logger.info "Received #{e.class}: #{e}"
      rescue MatrixSdk::MatrixForbiddenError => e
        # Not logged in?
        logger.warn "Received #{e.class}: #{e} - access token no longer valid?"
      end

      if in_room
        users = api.get_room_members(room)[:chunk].select { |c| c[:content][:membership] == 'join' }
        next if users.count > 1

        logger.info "Room #{room} is empty, leaving."

        api.leave_room(room.to_s)
      else
        logger.info "Not in room #{room}, removing."
      end

      track.remove_track
    end
  rescue StandardError => e
    logger.error "#{e.class} occured during room ensurance; #{e}"
  end

  def matrix_thread
    logger.info 'Starting Matrix sync loop...'
    client.sync_filter = ROOM_STATE_FILTER
    while running
      begin
        client.sync(timeout: 10.0, set_presence: :offline, since: config.client.next_batch)

        config.client.next_batch = client.next_batch
        config.save!

        sleep 10
      rescue StandardError => e
        logger.error "#{e.class} in sync: #{e}. Retrying in 30s"
        sleep 30
      end
    end
  end

  def fix_media_url(url)
    result = nil
    stored = config.media.where original_url: url

    if stored.any?
      current_url = stored.first
      return current_url[:mxc_url] if Time.now - current_url[:timestamp] < 48 * 60 * 60

      stored.update timestamp: Time.now

      uri = URI(url)
      query = Net::HTTP::Get.new uri
      query['If-Modified-Since'] = current_url[:last_modified] if current_url[:last_modified]
      query['If-None-Match'] = current_url[:etag] if current_url[:etag]

      result = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
        http.request query
      end

      return current_url[:mxc_url] if result.is_a? Net::HTTPNotModified
      return current_url[:mxc_url] unless result.is_a? Net::HTTPSuccess

      to_update = {
        etag: result['etag'] == current_url[:etag] ? nil : result['etag'],
        last_modified: result['last-modified'] == current_url[:last_modified] ? nil : result['last-modified']
      }.compact
      stored.update(to_update) if to_update.any?

      return current_url[:mxc_url] if current_url[:sha256] && Digest::SHA256.hexdigest(result.body) == current_url[:sha256]
    else
      result = Net::HTTP.get_response(URI(url))
      result.value
    end

    raise 'Retrieved empty response' if result.body.nil? || result.body.empty?

    mxc_url = config.client.api.media_upload(result.body, result.content_type)[:content_uri]
    raise 'Failed to upload image' unless mxc_url

    if stored.any?
      stored.update mxc_url: mxc_url
    else
      extradata = {
        etag: result['etag'],
        last_modified: result['last-modified'],
        sha256: Digest::SHA256.hexdigest(result.body)
      }.compact
      config.media.insert(original_url: url, mxc_url: mxc_url, **extradata)
    end

    mxc_url
  rescue StandardError => e
    logger.error "#{e.class} when trying to fix media URL: #{e}"
    nil
  end
end

if $PROGRAM_NAME == __FILE__
  options = {
    config: 'releasetracker.yml',
    debug: false,
    sdk_debug: false
  }

  opts_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($PROGRAM_NAME, File.extname($PROGRAM_NAME))} [ARGS...]"

    opts.on('-c', '--config CONFIG', 'specify the config file to use - defaults to "releasetracker.yml"') do |config|
      options[:config] = config
    end

    opts.on('-d', 'debug the SDK calls') do
      options[:sdk_debug] = true
    end

    opts.on('-v', '--verbose', 'use verbose output') do
      options[:debug] = true
    end

    opts.on('-h', '--help', 'show this text') do
      puts opts_parser
      exit
    end
  end
  opts_parser.parse!

  MatrixReleasetracker.debug! if options[:debug]
  MatrixSdk.debug! if options.delete :sdk_debug

  runner = Releasetracker.new(**options)

  # Signal.trap("INT") { runner.running = false; logger.info "Interrupt received, shutting down."; }
  # Signal.trap("TERM") { runner.running = false; logger.info "Interrupt received, shutting down."; }

  runner.run!
end
